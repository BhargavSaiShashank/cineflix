"use client";

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Sparkles, Film, Clock, Star, AlertTriangle, Lightbulb, Camera, Eye } from 'lucide-react';
import Image from 'next/image';
import { mockMovies } from '@/services/mockData';

// Scene types
const SCENE_TYPES = [
  { id: 'key', name: 'Key Moments', icon: <Clock className="h-4 w-4" /> },
  { id: 'emotional', name: 'Emotional Impact', icon: <Star className="h-4 w-4" /> },
  { id: 'technical', name: 'Technical Analysis', icon: <Camera className="h-4 w-4" /> },
  { id: 'hidden', name: 'Hidden Details', icon: <Eye className="h-4 w-4" /> },
  { id: 'warnings', name: 'Content Warnings', icon: <AlertTriangle className="h-4 w-4" /> }
];

// Mock scene data (in a real app, this would be generated by AI)
const SCENE_DATA: Record<string, Record<string, any[]>> = {
  'Inception': {
    'key': [
      {
        timestamp: '0:05:23',
        title: 'Dream Collapse',
        description: 'The first dream level collapses, introducing the concept of unstable dream architecture.',
        significance: 'Establishes the rules of the dream world and the dangers involved.'
      },
      {
        timestamp: '0:45:12',
        title: 'Zero Gravity Hotel Fight',
        description: 'Arthur fights projections in the hotel corridor as gravity shifts.',
        significance: 'Visually stunning sequence that demonstrates how the physical world changes when the dreamer experiences external stimuli.'
      },
      {
        timestamp: '1:58:30',
        title: 'Limbo City Crumbling',
        description: 'Cobb and Ariadne navigate through the crumbling city in Limbo.',
        significance: 'Represents Cobb finally letting go of his constructed memories of Mal.'
      },
      {
        timestamp: '2:18:05',
        title: 'The Spinning Top Ending',
        description: 'Cobb spins the top and walks away to his children without seeing if it falls.',
        significance: 'Ambiguous ending that leaves viewers questioning whether Cobb is still in a dream.'
      }
    ],
    'emotional': [
      {
        timestamp: '0:32:18',
        title: 'Mal\'s Suicide',
        description: 'Flashback showing Mal jumping from the building while Cobb watches helplessly.',
        impact: 'Devastating moment that establishes Cobb\'s guilt and emotional trauma.',
        musicNotes: 'Hans Zimmer\'s score builds tension and sorrow simultaneously.'
      },
      {
        timestamp: '1:42:55',
        title: 'Fischer\'s Reconciliation',
        description: 'Robert Fischer opens the safe and finds the windmill, leading to an emotional reconciliation with his father\'s memory.',
        impact: 'Cathartic moment that resolves Fischer\'s emotional arc while ironically being a manufactured emotion.',
        musicNotes: 'Subtle, emotional strings emphasize the false but meaningful resolution.'
      }
    ],
    'technical': [
      {
        timestamp: '0:58:20',
        title: 'Paris Folding Scene',
        description: 'Ariadne bends and folds the streets of Paris during her first shared dream with Cobb.',
        technique: 'Combination of practical effects and CGI. Physical sets were built that could actually fold, enhanced with digital extensions.',
        directorNotes: 'Nolan wanted to use as many practical effects as possible to ground the surreal imagery in reality.'
      },
      {
        timestamp: '1:12:40',
        title: 'Rotating Corridor Fight',
        description: 'Arthur fights projections in a hotel corridor that rotates 360 degrees.',
        technique: 'Built a massive rotating set that could turn completely around. Actors trained for weeks to perform the choreography while the set rotated.',
        directorNotes: 'One of the most challenging sequences to film, requiring precise timing and physical endurance from the actors.'
      }
    ]
  },
  'The Shawshank Redemption': {
    'key': [
      {
        timestamp: '0:18:45',
        title: 'Rooftop Beer Scene',
        description: 'Andy secures beer for his fellow inmates while tarring the prison roof.',
        significance: 'First moment where Andy uses his intelligence to improve prison conditions, earning respect from other inmates.'
      },
      {
        timestamp: '1:02:30',
        title: 'Mozart Opera Scene',
        description: 'Andy locks himself in the warden\'s office and plays Mozart over the prison PA system.',
        significance: 'Represents a moment of beauty and freedom in the oppressive prison environment.'
      },
      {
        timestamp: '2:06:15',
        title: 'Escape Discovery',
        description: 'The warden discovers Andy\'s escape tunnel behind the Raquel Welch poster.',
        significance: 'Culmination of Andy\'s decades-long plan, revealing his extraordinary patience and determination.'
      },
      {
        timestamp: '2:16:40',
        title: 'Beach Reunion',
        description: 'Red finds Andy on the beach in Zihuatanejo.',
        significance: 'Final payoff that completes both characters\' journeys to freedom and redemption.'
      }
    ],
    'emotional': [
      {
        timestamp: '0:43:20',
        title: 'Brooks\' Release and Suicide',
        description: 'Elderly inmate Brooks is released after decades in prison but cannot adjust to the outside world.',
        impact: 'Heartbreaking sequence showing the institutionalization of long-term prisoners.',
        musicNotes: 'Thomas Newman\'s score emphasizes the loneliness and disorientation.'
      },
      {
        timestamp: '1:45:10',
        title: 'Red\'s Final Parole Hearing',
        description: 'Red finally speaks honestly at his parole hearing about his regret and rehabilitation.',
        impact: 'Powerful moment of self-acceptance and truth after decades of rehearsed answers.',
        musicNotes: 'Minimal music allows Morgan Freeman\'s performance to carry the emotional weight.'
      }
    ]
  },
  'default': {
    'key': [
      {
        timestamp: '0:25:00',
        title: 'Inciting Incident',
        description: 'The main character faces the central conflict that drives the story forward.',
        significance: 'Sets the main plot in motion and establishes the stakes.'
      },
      {
        timestamp: '1:15:00',
        title: 'Midpoint Twist',
        description: 'A significant revelation or event that changes the trajectory of the story.',
        significance: 'Raises the stakes and often reveals deeper layers to the conflict.'
      },
      {
        timestamp: '1:45:00',
        title: 'Climactic Sequence',
        description: 'The final confrontation where the main conflict reaches its peak intensity.',
        significance: 'Resolves the central conflict and demonstrates the character\'s growth or change.'
      }
    ],
    'emotional': [
      {
        timestamp: '0:40:00',
        title: 'Character Development Moment',
        description: 'A scene that reveals important aspects of the protagonist\'s personality or background.',
        impact: 'Helps the audience connect emotionally with the character\'s journey.',
        musicNotes: 'Score typically emphasizes the emotional undertones of the scene.'
      }
    ],
    'technical': [
      {
        timestamp: '0:55:00',
        title: 'Signature Visual Sequence',
        description: 'A visually distinctive scene that showcases the film\'s style.',
        technique: 'Often employs unique camera movements, lighting, or special effects.',
        directorNotes: 'Usually represents the director\'s visual approach to storytelling.'
      }
    ]
  }
};

export default function SceneBreakdown() {
  const [selectedMovie, setSelectedMovie] = useState(mockMovies[0]);
  const [activeTab, setActiveTab] = useState('key');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [sceneData, setSceneData] = useState<any[]>([]);

  // Analyze scenes
  const analyzeScenes = (sceneType: string) => {
    setIsAnalyzing(true);
    setActiveTab(sceneType);
    
    // Simulate AI processing
    setTimeout(() => {
      // In a real app, this would call an AI service
      // For now, we'll use mock data
      const movieScenes = SCENE_DATA[selectedMovie.title] || SCENE_DATA['default'];
      const scenes = movieScenes[sceneType] || [];
      
      setSceneData(scenes);
      setIsAnalyzing(false);
    }, 1500);
  };

  return (
    <div className="w-full max-w-6xl mx-auto px-4 py-8">
      <div className="mb-8 text-center">
        <h2 className="text-3xl font-bold text-white mb-2">
          AI Scene Breakdown
        </h2>
        <p className="text-gray-400 max-w-2xl mx-auto">
          Discover key moments, emotional impacts, and technical details of your favorite films.
        </p>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Movie selection */}
        <div className="lg:col-span-1">
          <Card className="bg-[#1e293b] border-gray-700">
            <CardHeader>
              <CardTitle className="text-white">Select a Movie</CardTitle>
              <CardDescription className="text-gray-400">
                Choose a film to analyze its scenes
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 gap-3">
                {mockMovies.slice(0, 6).map(movie => (
                  <div 
                    key={movie.id}
                    className={`cursor-pointer rounded-lg overflow-hidden border-2 transition-all ${
                      selectedMovie?.id === movie.id 
                        ? 'border-pink-500 shadow-[0_0_15px_rgba(236,72,153,0.3)]' 
                        : 'border-gray-700 hover:border-gray-500'
                    }`}
                    onClick={() => {
                      setSelectedMovie(movie);
                      setSceneData([]);
                    }}
                  >
                    <div className="relative aspect-[2/3]">
                      <Image
                        src={movie.posterPath}
                        alt={movie.title}
                        fill
                        className="object-cover"
                      />
                    </div>
                  </div>
                ))}
              </div>
              
              {selectedMovie && (
                <div className="mt-4">
                  <h3 className="text-white font-bold">{selectedMovie.title}</h3>
                  <p className="text-gray-400 text-sm">{selectedMovie.year}</p>
                </div>
              )}
            </CardContent>
            <CardFooter className="flex flex-col space-y-4">
              <p className="text-gray-400 text-sm">Select a scene type to analyze:</p>
              <div className="grid grid-cols-1 gap-2 w-full">
                {SCENE_TYPES.map(type => (
                  <Button
                    key={type.id}
                    variant="outline"
                    className={`justify-start border-gray-700 ${
                      activeTab === type.id ? 'bg-pink-600 hover:bg-pink-700 text-white' : 'bg-[#0f172a] hover:border-pink-500 text-white'
                    }`}
                    onClick={() => analyzeScenes(type.id)}
                    disabled={isAnalyzing}
                  >
                    <div className="mr-2">{type.icon}</div>
                    {type.name}
                  </Button>
                ))}
              </div>
            </CardFooter>
          </Card>
        </div>
        
        {/* Scene analysis display */}
        <div className="lg:col-span-2">
          <Card className="bg-[#1e293b] border-gray-700 h-full">
            <CardHeader>
              <CardTitle className="text-white flex items-center">
                <Film className="mr-2 h-5 w-5 text-pink-500" />
                {SCENE_TYPES.find(type => type.id === activeTab)?.name || 'Scene Analysis'}
              </CardTitle>
              <CardDescription className="text-gray-400">
                {activeTab === 'key' && 'Critical moments that define the film\'s narrative'}
                {activeTab === 'emotional' && 'Scenes with the strongest emotional impact'}
                {activeTab === 'technical' && 'Analysis of filmmaking techniques and visual style'}
                {activeTab === 'hidden' && 'Easter eggs, subtle details, and foreshadowing'}
                {activeTab === 'warnings' && 'Content advisories for sensitive viewers'}
              </CardDescription>
            </CardHeader>
            <CardContent className="min-h-[400px]">
              {isAnalyzing ? (
                <div className="flex items-center justify-center h-full">
                  <div className="text-center">
                    <Sparkles className="h-10 w-10 text-pink-500 animate-pulse mx-auto mb-4" />
                    <p className="text-gray-400">Analyzing scenes with AI...</p>
                  </div>
                </div>
              ) : sceneData.length > 0 ? (
                <div className="space-y-6">
                  {sceneData.map((scene, index) => (
                    <div key={index} className="bg-[#0f172a] rounded-lg p-4 border border-gray-700">
                      <div className="flex justify-between items-start mb-2">
                        <h3 className="text-white font-bold">{scene.title}</h3>
                        <span className="bg-pink-600/20 text-pink-400 text-xs px-2 py-1 rounded">
                          {scene.timestamp}
                        </span>
                      </div>
                      <p className="text-gray-300 mb-3">{scene.description}</p>
                      
                      {scene.significance && (
                        <div className="flex items-start mt-2">
                          <Lightbulb className="h-4 w-4 text-yellow-500 mr-2 mt-0.5 flex-shrink-0" />
                          <p className="text-gray-400 text-sm">{scene.significance}</p>
                        </div>
                      )}
                      
                      {scene.impact && (
                        <div className="flex items-start mt-2">
                          <Star className="h-4 w-4 text-yellow-500 mr-2 mt-0.5 flex-shrink-0" />
                          <p className="text-gray-400 text-sm">{scene.impact}</p>
                        </div>
                      )}
                      
                      {scene.technique && (
                        <div className="flex items-start mt-2">
                          <Camera className="h-4 w-4 text-blue-500 mr-2 mt-0.5 flex-shrink-0" />
                          <p className="text-gray-400 text-sm">{scene.technique}</p>
                        </div>
                      )}
                      
                      {scene.musicNotes && (
                        <div className="flex items-start mt-2">
                          <span className="text-purple-500 mr-2 mt-0.5 flex-shrink-0">♪</span>
                          <p className="text-gray-400 text-sm">{scene.musicNotes}</p>
                        </div>
                      )}
                      
                      {scene.directorNotes && (
                        <div className="flex items-start mt-2">
                          <Eye className="h-4 w-4 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                          <p className="text-gray-400 text-sm">{scene.directorNotes}</p>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <div className="flex items-center justify-center h-full">
                  <p className="text-gray-500 italic">Select a scene type to analyze {selectedMovie.title}</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}